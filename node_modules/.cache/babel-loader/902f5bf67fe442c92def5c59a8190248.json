{"ast":null,"code":"import axios from \"axios\";\nimport { baseUrl } from \"./\";\nvar defaultPath = \"users\";\nexport default {\n  getUsers: function getUsers() {\n    return axios.get(\"\".concat(baseUrl, \"/\").concat(defaultPath));\n  },\n  getUser: function getUser(id) {\n    return axios.get(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id));\n  },\n  login: function login(email, password) {\n    return axios.post(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/login\"), {\n      email: email,\n      password: password\n    });\n  },\n  register: function register(name, email, password) {\n    return axios.post(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/register\"), {\n      name: name,\n      email: email,\n      password: password\n    });\n  },\n  updateUser: function updateUser(id, data) {\n    return axios.post(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id), data);\n  },\n  addFriend: function addFriend(contactId, userId) {\n    return axios.post(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(userId, \"/new-friend\"), {\n      contactId: contactId\n    });\n  },\n  blockFriend: function blockFriend(id, data) {\n    return axios.post(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/new-blocked\"), data);\n  },\n  requestFriend: function requestFriend(contactId, userId) {\n    return axios.post(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(userId, \"/new-request\"), {\n      contactId: contactId\n    });\n  },\n  searchUser: function searchUser(id, userQuery) {\n    return axios.get(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/search-user?user=\").concat(userQuery));\n  },\n  searchFriend: function searchFriend(id, friendQuery) {\n    return axios.get(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/search-friend?friend=\").concat(friendQuery));\n  },\n  getChatList: function getChatList(id) {\n    return axios.get(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/chat-list\"));\n  },\n  getFriendList: function getFriendList(id) {\n    return axios.get(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/friend-list\"));\n  },\n  getRequestList: function getRequestList(id) {\n    return axios.get(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/request-list\"));\n  },\n  getBlockedList: function getBlockedList(id) {\n    return axios.get(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/blocked-list\"));\n  },\n  deleteChat: function deleteChat(id, chatId) {\n    return axios.delete(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/delete-chat?chatId=\").concat(chatId));\n  },\n  deleteFriend: function deleteFriend(id, friendId) {\n    return axios.delete(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/delete-friend?friendId=\").concat(friendId));\n  },\n  deleteBlocked: function deleteBlocked(id, blockedId) {\n    return axios.delete(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id, \"/delete-blocked?blockedId=\").concat(blockedId));\n  },\n  deleteRequest: function deleteRequest(contactId, userId) {\n    return axios.delete(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(userId, \"/delete-request?contactId=\").concat(contactId));\n  },\n  cancelFriendRequest: function cancelFriendRequest(contactId, userId) {\n    return axios.delete(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(userId, \"/cancel-request?contactId=\").concat(contactId));\n  },\n  deleteUser: function deleteUser(id) {\n    return axios.delete(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/\").concat(id));\n  },\n  dropFriend: function dropFriend() {\n    console.log('dropped');\n    return axios.delete(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/drop-friend\"));\n  },\n  dropRequest: function dropRequest() {\n    return axios.delete(\"\".concat(baseUrl, \"/\").concat(defaultPath, \"/drop-request\"));\n  }\n};","map":{"version":3,"sources":["/home/yamakasi/React/react_chat_socketio/src/api/user.js"],"names":["axios","baseUrl","defaultPath","getUsers","get","getUser","id","login","email","password","post","register","name","updateUser","data","addFriend","contactId","userId","blockFriend","requestFriend","searchUser","userQuery","searchFriend","friendQuery","getChatList","getFriendList","getRequestList","getBlockedList","deleteChat","chatId","delete","deleteFriend","friendId","deleteBlocked","blockedId","deleteRequest","cancelFriendRequest","deleteUser","dropFriend","console","log","dropRequest"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { baseUrl } from \"./\";\n\nconst defaultPath = \"users\";\n\nexport default {\n  getUsers: () => axios.get(`${baseUrl}/${defaultPath}`),\n\n  getUser: id => axios.get(`${baseUrl}/${defaultPath}/${id}`),\n\n  login: (email, password) =>\n    axios.post(`${baseUrl}/${defaultPath}/login`, { email, password }),\n\n  register: (name, email, password) =>\n    axios.post(`${baseUrl}/${defaultPath}/register`, { name, email, password }),\n\n  updateUser: (id, data) => axios.post(`${baseUrl}/${defaultPath}/${id}`, data),\n\n  addFriend: (contactId, userId) => axios.post(`${baseUrl}/${defaultPath}/${userId}/new-friend`, { contactId }),\n\n  blockFriend: (id, data) =>\n    axios.post(`${baseUrl}/${defaultPath}/${id}/new-blocked`, data),\n\n  requestFriend: (contactId, userId) =>\n    axios.post(`${baseUrl}/${defaultPath}/${userId}/new-request`, {contactId}),\n\n  searchUser: (id, userQuery) =>\n    axios.get(`${baseUrl}/${defaultPath}/${id}/search-user?user=${userQuery}`),\n\n  searchFriend: (id, friendQuery) =>\n    axios.get(\n      `${baseUrl}/${defaultPath}/${id}/search-friend?friend=${friendQuery}`\n    ),\n\n  getChatList: id => axios.get(`${baseUrl}/${defaultPath}/${id}/chat-list`),\n\n  getFriendList: id => axios.get(`${baseUrl}/${defaultPath}/${id}/friend-list`),\n\n  getRequestList: id =>\n    axios.get(`${baseUrl}/${defaultPath}/${id}/request-list`),\n\n  getBlockedList: id =>\n    axios.get(`${baseUrl}/${defaultPath}/${id}/blocked-list`),\n\n  deleteChat: (id, chatId) => axios.delete(`${baseUrl}/${defaultPath}/${id}/delete-chat?chatId=${chatId}`),\n\n  deleteFriend: (id, friendId) => axios.delete(`${baseUrl}/${defaultPath}/${id}/delete-friend?friendId=${friendId}`),\n\n  deleteBlocked: (id, blockedId) => axios.delete(`${baseUrl}/${defaultPath}/${id}/delete-blocked?blockedId=${blockedId}`),\n\n  deleteRequest: (contactId, userId) => axios.delete(`${baseUrl}/${defaultPath}/${userId}/delete-request?contactId=${contactId}`),\n\n  cancelFriendRequest: (contactId, userId) => axios.delete(`${baseUrl}/${defaultPath}/${userId}/cancel-request?contactId=${contactId}`),\n\n  deleteUser: id => axios.delete(`${baseUrl}/${defaultPath}/${id}`),\n\n  dropFriend: () => {\n    console.log('dropped')\n    return axios.delete(`${baseUrl}/${defaultPath}/drop-friend`)\n  },\n\n  dropRequest: () => axios.delete(`${baseUrl}/${defaultPath}/drop-request`),\n};\n"]},"metadata":{},"sourceType":"module"}