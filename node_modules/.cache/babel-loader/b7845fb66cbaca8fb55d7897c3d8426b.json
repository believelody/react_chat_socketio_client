{"ast":null,"code":"import _regeneratorRuntime from \"/home/yamakasi/React/react_chat_socketio/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/yamakasi/React/react_chat_socketio/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/yamakasi/React/react_chat_socketio/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/yamakasi/React/react_chat_socketio/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/yamakasi/React/react_chat_socketio/src/components/chats/ChatItem.jsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin: 0;\\n  padding: 4px 0;\\n  width: auto;\\n  height: 50px;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: start;\\n  transition: all 300ms ease-in;\\n  border-bottom: 2px solid rgba(255, 255, 255, .4);\\n  position: relative;\\n  cursor: pointer;\\n\\n  &:hover {\\n    background-color: #32465a;\\n    padding-left: 16px;\\n    border-right: 0.6em solid white;\\n    color: white;\\n  }\\n\\n  & .chat-name {\\n    font-size: 1.5em;\\n    margin-left: 8px;\\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, .6);\\n  }\\n\\n  & .chat-text {\\n    font-size: 1.2em;\\n    padding-left: 8px;\\n    padding-right: 16px;\\n    margin-left: 16px;\\n  }\\n\\n  & .chat-count-unread {\\n    position: absolute;\\n    font-size: 1.5em;\\n    right: 5%;\\n    top: 50%;\\n    border: 1px solid white;\\n    border-radius: 50%;\\n    padding: 4px;\\n    transform: translate3d(0, -50%, 0);\\n  }\\n\\n  & .chat-actions {\\n    margin-left: auto;\\n    margin-right: 8px;\\n\\n    & > .chat {\\n      background-color: #FFA500;\\n    }\\n\\n    & > .chat-actions-btn {\\n      cursor: pointer;\\n      text-shadow: 2px 2px 4px rgba(0, 0, 0, .6);\\n      box-shadow: 2px 2px 4px rgba(0, 0, 0, .6);\\n      margin: 0px 4px;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useAppHooks } from \"../../contexts\";\nimport { CHAT_SELECTED } from \"../../reducers/transitionReducer\";\nimport isMobile from \"../../utils/isMobile\";\nimport OpenChatIcon from \"../icons/OpenChatIcon\";\nimport { socketOn } from \"../../socket\";\nvar ChatItemStyle = styled.li(_templateObject());\n\nvar ChatItem = function ChatItem(_ref) {\n  var chat = _ref.chat;\n\n  var _useAppHooks = useAppHooks(),\n      useAuth = _useAppHooks.useAuth,\n      useTransition = _useAppHooks.useTransition,\n      history = _useAppHooks.history,\n      socket = _useAppHooks.socket;\n\n  var _useAuth = _slicedToArray(useAuth, 2),\n      user = _useAuth[0].user,\n      dispatchAuth = _useAuth[1];\n\n  var _useTransition = _slicedToArray(useTransition, 2),\n      transition = _useTransition[0],\n      dispatchTransition = _useTransition[1];\n\n  var _useState = useState(chat.users.find(function (u) {\n    return u.id !== user.id;\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      contact = _useState2[0],\n      setContact = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      lastMsg = _useState4[0],\n      setLastMsg = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      nbUnread = _useState6[0],\n      setUnread = _useState6[1];\n\n  var openChat =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              alert('open');\n              if (isMobile) dispatchTransition({\n                type: CHAT_SELECTED,\n                payload: true\n              });\n              history.push(\"/chats/\".concat(chat.id));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function openChat() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  socketOn('count-unread-message', socket, chat, function (data, chat) {\n    if (data && data.unread && data.users.find(function (u) {\n      return u.id === user.id;\n    }) && data.chat.id === chat.id) {\n      setUnread(function (prevUnread) {\n        return prevUnread + 1;\n      });\n    }\n\n    if (data && data.message) {\n      setLastMsg(data.message.text);\n    }\n  });\n  socketOn('count-read-message', socket, chat, function (data, chat) {\n    if (data.chatId === chat.id && data.userId === user.id) {\n      setUnread(0);\n    }\n  });\n  useEffect(function () {\n    if (chat.messages.length > 0) setLastMsg(chat.messages.reverse()[0].text);\n    if (chat.unreads.length > 0 && chat.unreads.find(function (u) {\n      return u.authorId !== user.id;\n    })) setUnread(chat.unreads.length);\n  }, []); // console.log(chat)\n\n  return React.createElement(ChatItemStyle, {\n    handleClick: openChat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, nbUnread > 0 && React.createElement(\"span\", {\n    className: \"chat-count-unread\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, nbUnread), contact && React.createElement(\"span\", {\n    className: \"chat-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, contact.name), React.createElement(\"span\", {\n    className: \"chat-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, lastMsg));\n};\n\nexport default ChatItem;","map":{"version":3,"sources":["/home/yamakasi/React/react_chat_socketio/src/components/chats/ChatItem.jsx"],"names":["React","useEffect","useState","styled","useAppHooks","CHAT_SELECTED","isMobile","OpenChatIcon","socketOn","ChatItemStyle","li","ChatItem","chat","useAuth","useTransition","history","socket","user","dispatchAuth","transition","dispatchTransition","users","find","u","id","contact","setContact","lastMsg","setLastMsg","nbUnread","setUnread","openChat","alert","type","payload","push","data","unread","prevUnread","message","text","chatId","userId","messages","length","reverse","unreads","authorId","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useAppHooks } from \"../../contexts\";\nimport { CHAT_SELECTED } from \"../../reducers/transitionReducer\";\nimport isMobile from \"../../utils/isMobile\";\nimport OpenChatIcon from \"../icons/OpenChatIcon\";\nimport { socketOn } from \"../../socket\";\n\nconst ChatItemStyle = styled.li`\n  margin: 0;\n  padding: 4px 0;\n  width: auto;\n  height: 50px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  transition: all 300ms ease-in;\n  border-bottom: 2px solid rgba(255, 255, 255, .4);\n  position: relative;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #32465a;\n    padding-left: 16px;\n    border-right: 0.6em solid white;\n    color: white;\n  }\n\n  & .chat-name {\n    font-size: 1.5em;\n    margin-left: 8px;\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, .6);\n  }\n\n  & .chat-text {\n    font-size: 1.2em;\n    padding-left: 8px;\n    padding-right: 16px;\n    margin-left: 16px;\n  }\n\n  & .chat-count-unread {\n    position: absolute;\n    font-size: 1.5em;\n    right: 5%;\n    top: 50%;\n    border: 1px solid white;\n    border-radius: 50%;\n    padding: 4px;\n    transform: translate3d(0, -50%, 0);\n  }\n\n  & .chat-actions {\n    margin-left: auto;\n    margin-right: 8px;\n\n    & > .chat {\n      background-color: #FFA500;\n    }\n\n    & > .chat-actions-btn {\n      cursor: pointer;\n      text-shadow: 2px 2px 4px rgba(0, 0, 0, .6);\n      box-shadow: 2px 2px 4px rgba(0, 0, 0, .6);\n      margin: 0px 4px;\n    }\n  }\n`;\n\nconst ChatItem = ({ chat }) => {\n    const { useAuth, useTransition, history, socket } = useAppHooks();\n    const [{ user }, dispatchAuth] = useAuth;\n    const [transition, dispatchTransition] = useTransition;\n\n    const [contact, setContact] = useState(chat.users.find(u => u.id !== user.id))\n    const [lastMsg, setLastMsg] = useState()\n    const [nbUnread, setUnread] = useState(0)\n\n    const openChat = async () => {\n      alert('open')\n      if (isMobile) dispatchTransition({ type: CHAT_SELECTED, payload: true });\n      history.push(`/chats/${chat.id}`);\n    };\n\n    socketOn('count-unread-message', socket, chat, (data, chat) => {\n      if (data && data.unread && data.users.find(u => u.id === user.id) && data.chat.id === chat.id) {\n        setUnread(prevUnread => prevUnread + 1)\n      }\n\n      if (data && data.message) {\n        setLastMsg(data.message.text)\n      }\n    })\n\n  socketOn('count-read-message', socket, chat, (data, chat) => {\n    if (data.chatId === chat.id && data.userId === user.id) {\n      setUnread(0)\n    }\n  })\n\n    useEffect(() => {\n      if (chat.messages.length > 0) setLastMsg(chat.messages.reverse()[0].text)\n      if (chat.unreads.length > 0 && chat.unreads.find(u => u.authorId !== user.id)) setUnread(chat.unreads.length)\n    }, [])\n\n    // console.log(chat)\n\n    return (\n      <ChatItemStyle handleClick={openChat}>\n        {nbUnread > 0 && <span className='chat-count-unread'>{nbUnread}</span>}\n        {contact && <span className=\"chat-name\">{contact.name}</span>}\n        <span className=\"chat-text\">{lastMsg}</span>\n      </ChatItemStyle>\n    );\n};\n\nexport default ChatItem;\n"]},"metadata":{},"sourceType":"module"}